import pandas as pd
from datetime import datetime
from connectors import intrinio_data
from exception.exceptions import ValidationError, CalculationError, DataError

"""
This module contains a collection of calculations shared by the trading
strategies contained in this package.
"""


def mark_to_market(df: object, price_date: datetime):
    """
        Peforms a Mark to Market on a Pandas dataframe representing
        a ranked portfolio, and given a price date. This is used
        to calculate returns on a portfolio generated by one of the
        strategies

        The dataframe must contain the following columuns:

        * ticker
        * analysis_price

        and will add:

        * current_price
        * actual_return

        Parmeters
        ---------
        df : Pandas DataFrame
            portfolio dataframe
        price_date : datetime
            price date, current or historical

        Returns
        ---------
        A new dataframe with the added columns

        Raises
        ---------
        ValidationError if parameters are incorrect
        DataError if there are problems reading price data
    """

    if (df is None or price_date is None):
        raise ValidationError(
            "Invalid Parameters supplied to Mark to Market calculation", None)

    if ('ticker' not in df.columns
            or 'analysis_price' not in df.columns):
        raise ValidationError(
            "Could not extract required fields for Mark to Market calculation", None)

    mmt_prices = []

    for ticker in df['ticker']:
        try:
            latest_price = intrinio_data.get_latest_close_price(ticker, price_date, 5)[
                1]
            mmt_prices.append(latest_price)
        except Exception as e:
            raise DataError("Could not perform MMT calculation", e)

    df['current_price'] = mmt_prices
    df['actual_return'] = (df['current_price'] -
                           df['analysis_price']) / df['analysis_price']
    return df
